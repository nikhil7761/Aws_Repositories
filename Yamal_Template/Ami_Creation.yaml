AWSTemplateFormatVersion: "2010-09-09"
Description: "Create a Lambda function to create a daily AMI from an existing EC2 instance"

Parameters:
  SourceInstanceId:
    Type: String
    Default: "i-0191c74491b08e336"
    Description: "ID of the existing EC2 instance from which to create daily AMIs"

Resources:
  DailyAMIImageLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: !Ref LambdaCodeKey
      Handler: "lambda_function.lambda_handler"
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: "python3.8"
      Timeout: 300
      Environment:
        Variables:
          SourceInstanceId: !Ref SourceInstanceId
      FunctionName: "CreateDailyAMIImageFunction"

  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "LambdaExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
              - Effect: "Allow"
                Action:
                  - "ec2:CreateImage"
                  - "ec2:CreateTags"
                Resource: "*"

  DailyAMISchedule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "Schedule for creating daily AMI from EC2 instance"
      ScheduleExpression: "cron(0 0 * * ? *)" # Midnight UTC
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt DailyAMIImageLambdaFunction.Arn
          Id: "CreateDailyAMIImage"

          
